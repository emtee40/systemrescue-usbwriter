# no shebang supported here
# can only be directly called with the correct shell (=packaged version of bash)
#
# sysrescueusbwriter - write an iso image of SystemRescue to USB media
# 
# Author: Gerd v. Egidy
# SPDX-License-Identifier: GPL-3.0-or-later
#
# https://gitlab.com/systemrescue/systemrescue-sources/-/issues/284

BINDIR="${APPDIR}/usr/bin"

# abort on failures
set -o errexit -o pipefail -o noclobber -o nounset

print_help()
{
    echo "sysrescueusbwriter - write an iso image of SystemRescue to USB media"
    echo ""
    echo "Usage:"
    echo "sysrescueusbwriter-x86_64.AppImage [OPTIONS] <ISO-FILE>"
    echo ""
    echo "<ISO-FILE>                     ISO image of SystemRescue"
    echo ""
    echo "Options:"
    echo ""
    echo "-t|--targetdev=<DEVICE-PATH>   Device file of the USB media you want to write to."
    echo "                               Something like /dev/sdb."
    echo "                               A text UI to select a likely device is shown if missing."
    echo ""
    echo "-i|--verify-only=<DEVICE-PATH> Don't write out the image, but just compare the current"
    echo "                               content on the given device to the image."
    echo "                               Can't be used together with -t|--targetdev."
    echo ""
    echo "-e|--tmpdir=<TMPDIR>           Use the given directory for storing temporary files."
    echo "                               You need enough space there for unpacking the whole"
    echo "                               iso image. Defaults to the TMPDIR environment variable."
    echo ""
    echo "-g|--grant=<TOOL>              <TOOL> being one of: sudo, pkexec, su"
    echo "                               Use the given tool to grant permissions for accessing the"
    echo "                               target device node. By default all 3 tools are tried."
    echo ""
    echo "-c|--cli                       Do not use the ncurses text UI, only command line"
    echo ""
    echo "--appimage-extract             Unpack the AppImage. Overrides other parameters."
    echo ""
    echo "--appimage-mount               Mounts the AppImage to a path in TMPDIR, prints out the path."
    echo "                               Unmounts when terminated with Ctrl+C. Overrides other parameters."
    echo ""
    echo "-l|--licenses                  Show licenses of all programs packaged in the AppImage."
    echo "                               Use 'e' to view a file and 'q' to quit."
    echo "                               Showing the licenses overrides other parameters."
    echo ""
    echo "-h|--help                      Show this help. Overrides other parameters."
    echo ""
    echo "See https://gitlab.com/systemrescue/systemrescue-sources/-/issues/284 for details."
    
    return
}

# error while parsing commandline parameters
argument_error()
{
    echo "$1"
    echo
    echo "---------------------------------"
    echo
    print_help
    exit 2
}

show_licenses()
{
    # nnn will change the current directory when browsing
    # this means we can't use any of our packaged binaries
    # so less as the "editor" used for showing the licenses comes from the host system

    if ! command -v less &>/dev/null ; then
        echo "ERROR: 'less' command not found. It is required for viewing licenses"
        exit 1
    fi
    
    EDITOR=less "${BINDIR}/nnn" "${APPDIR}/usr/share/licenses/"
}

parse_args()
{
    # adapted from https://stackoverflow.com/a/29754866 by Robert Siemer
    # version edited Mar 4 '21 at 0:11, licensed under CC BY-SA 4.0 due to Stackoverflow Terms of Service
    # https://creativecommons.org/licenses/by-sa/4.0/

    # show help when no arguments given
    [[ $# -eq 0 ]] && { print_help ; exit 0 ; }
    
    # -allow a command to fail with !’s side effect on errexit
    # -use return value from ${PIPESTATUS[0]}, because ! hosed $?
    ! "${BINDIR}/getopt" --test > /dev/null 
    if [[ ${PIPESTATUS[0]} -ne 4 ]]; then
        echo 'ERROR: `getopt --test` failed in this environment'
        exit 1
    fi

    local OPTIONS="t:i:e:g:clh"
    local LONGOPTS="targetdev:,verify-only:,tmpdir:,grant:,cli,licenses,help"

    # option variables as globals, set to default values
    declare -g TARGETDEV=""
    declare -g VERIFY_ONLY=0
    declare -g ISOIMAGE=""
    declare -g VERBOSE=""
    declare -g GRANT_TOOL=""
    declare -g CLI=0
    declare -g TMPDIR
    
    # -regarding ! and PIPESTATUS see above
    # -temporarily store output to be able to check for errors
    # -activate quoting/enhanced mode (e.g. by writing out “--options”)
    # -pass arguments only via   -- "$@"   to separate them correctly
    ! PARSED=$("${BINDIR}/getopt" --options=$OPTIONS --longoptions=$LONGOPTS --name "$0" -- "$@")
    if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
        # e.g. return value is 1
        #  then getopt has complained about wrong arguments to stdout
        echo
        print_help
        exit 1
    fi
    # read getopt’s output this way to handle the quoting right:
    eval set -- "$PARSED"

    while true; do
        case "$1" in
            -t|--targetdev)
                if ! [[ -z "$TARGETDEV" ]]; then
                    echo "ERROR: -i|--verify_only and -t|--targetdev can't be used together"
                    print_help
                    exit 1
                fi

                TARGETDEV="$2"
                VERIFY_ONLY=0
                shift 2
                ;;
            -i|--verify-only)
                if ! [[ -z "$TARGETDEV" ]]; then
                    echo "ERROR: -i|--verify_only and -t|--targetdev can't be used together"
                    print_help
                    exit 1
                fi

                TARGETDEV="$2"
                VERIFY_ONLY=1
                shift 2
                ;;
            -e|--tmpdir)
                TMPDIR="$2"
                shift 2
                ;;
            -g|--grant)
                GRANT_TOOL="$2"
                shift 2
                
                if [[ "$GRANT_TOOL" != "sudo" ]] && \
                   [[ "$GRANT_TOOL" != "pkexec" ]] && \
                   [[ "$GRANT_TOOL" != "su" ]] ; then
                    echo "ERROR: unknown grant tool $GRANT_TOOL"
                    print_help
                    exit 1
                fi
                ;;
            -c|--cli)
                CLI=1
                shift
                ;;
            -h|--help)
                print_help
                exit 0
                ;;
            -l|--licenses)
                show_licenses
                exit 0
                ;;
            --)
                shift
                break
                ;;
            *)
                echo "ERROR: Argument parsing logic bug"
                exit 1
                ;;
        esac
    done

    # handle positional arguments 
    if [[ $# -lt 1 ]]; then
        argument_error "ERROR: iso image option missing or empty"
        exit 1
    fi
    if [[ $# -gt 1 ]]; then
        argument_error "ERROR: too many positional arguments"
        exit 1
    fi
    ISOIMAGE="$1"
    
    [[ -z "$ISOIMAGE" ]] && argument_error "ERROR: iso image option missing or empty"

    if [[ "$ISOIMAGE" =~ ^[^/] ]]; then
        # path relative to the dir we were originally called from
        ISOIMAGE="${OWD}/${ISOIMAGE}"
    fi

    if [[ -n "$TARGETDEV" ]] && [[ "$TARGETDEV" =~ ^[^/] ]]; then
        # path relative to the dir we were originally called from
        TARGETDEV="${OWD}/${TARGETDEV}"
    fi
    
    return
}

check_iso()
{
    if ! [[ -f "$ISOIMAGE" ]]; then
        echo "ERROR: No such file: $ISOIMAGE"
        exit 1
    fi

    if ! [[ -r "$ISOIMAGE" ]]; then
        echo "ERROR: not enough permissions to read $ISOIMAGE"
        exit 2
    fi

    echo "Checking ISO image..."
   
    # check if we really have an iso file as source and not something else
    if ! "${BINDIR}/xorriso" -drive_access "shared:readonly" -indev "${ISOIMAGE}" -toc >/dev/null 2>&1 || \
       ! "${BINDIR}/xorriso" -drive_access "shared:readonly" -indev "${ISOIMAGE}" -pvd_info >/dev/null 2>&1 || \
        "${BINDIR}/xorriso" -drive_access "shared:readonly" -indev "${ISOIMAGE}" -toc 2>&1 | \
            "${BINDIR}/grep" -E "(is blank|No ISO 9660 image|Drive address .* rejected)"; then
        echo "ERROR: $ISOIMAGE is not a valid ISO file"
        exit 3
    fi

    declare -g ISOSIZE=$("${BINDIR}/stat" -c %s "$ISOIMAGE")
    
    # check md5 checksum that might be embedded in the iso
    # ignore if it is missing but abort if present but not matching
    exitcode=0
    CHKSUMOUT=$("${BINDIR}/checkisomd5" "$ISOIMAGE" 2>&1) || exitcode=$?
    if [[ "$exitcode" -ne 0 ]]; then
        # checksum either not there or not matching
        if ! echo "$CHKSUMOUT" | grep -q "No checksum information available"; then
            echo "ERROR: MD5 checksum implanted in $ISOIMAGE does not match"
            exit 3
        fi
    fi

    return
}

check_dialog()
{
    # test if the dialog command is working
    # there might for example be some problem with the terminfo database
    # we then want to be able to show some meaningful error to the user
    
    exitcode=0
    TERMINFO="${APPDIR}/usr/share/terminfo" \
        "${BINDIR}/dialog" --erase-on-exit --infobox "dialog/ncurses test" 0 0 || exitcode=$?
    
    if [[ "$exitcode" -ne 0 ]]; then
        # checksum either not there or not matching
        echo "ERROR: can't execute dialog/ncurses. Maybe unknown terminal type ($TERM)?"
        echo
        echo "Hint: you can use command line only with the --cli parameter"
        exit 2
    fi
}

# check if the iso image is compatible with this version of sysrescueusbwriter
check_compatibility()
{
    if [[ -f "${TMPDIR}/filesystem/sysresccd/.imageinfo" ]]; then
        # from SystemRescue version 9.06 onwards we have the imageinfo file
        # if it exists then only use it
        
        if ! grep -v "^#" "${TMPDIR}/filesystem/sysresccd/.imageinfo" | grep -q "ARCH=x86_64"; then
            echo "ERROR: architecture of the iso image not compatible with this script"
            exit 3
        fi
        
        local OUR_SYSLINUX_VER=$(cat "${APPDIR}/usr/share/versions/syslinux")
        if ! grep -v "^#" "${TMPDIR}/filesystem/sysresccd/.imageinfo" | grep -q "SYSLINUX_VERSION=${OUR_SYSLINUX_VER}\$"; then
            echo "ERROR: syslinux used in the iso image not compatible with this script"
            echo "Please look for a version of this script dedicated for your version of the SystemRescue image."
            exit 3
        fi
        
        if ! grep -v "^#" "${TMPDIR}/filesystem/sysresccd/.imageinfo" | grep -q "FORMAT_EPOCH=1\$"; then
            echo "ERROR: format epoch used in the iso image not compatible with this script"
            echo "Please look for a version of this script dedicated for your version of the SystemRescue image."
            exit 3
        fi
    else
        # an older version of SystemRescue -> we have to guess about compatibility
        # we do not whitelist individual versions, but compare arch and syslinux version
        
        if ! [[ -f "${TMPDIR}/filesystem/sysresccd/VERSION" ]]; then
            echo "ERROR: iso image is not compatible with this script. Is this SystemRescue at all?"
            exit 3
        fi
            
        if ! [[ -f "${TMPDIR}/filesystem/sysresccd/x86_64/airootfs.sfs" ]] || \
           ! [[ -f "${TMPDIR}/filesystem/sysresccd/pkglist.x86_64.txt" ]]; then
            echo "ERROR: architecture of the iso image not compatible with this script"
            exit 3
        fi

        local OUR_SYSLINUX_VER=$(cat "${APPDIR}/usr/share/versions/syslinux")
        if ! grep -q "syslinux ${OUR_SYSLINUX_VER}\$" "${TMPDIR}/filesystem/sysresccd/pkglist.x86_64.txt" ; then
            echo "ERROR: syslinux used in the iso image not compatible with this script"
            echo "Please look for a version of this script dedicated for your version of the SystemRescue image."
            exit 3
        fi
        
        if [[ "$CLI" -eq 1 ]] ; then
            echo
            echo "WARNING: you seem to be using an iso image of an older version of SystemRescue"
            echo "Versions before 9.05 have not been thoroughly tested for compatibility with this script"
            echo
        else
            exitcode=0
                TERMINFO="${APPDIR}/usr/share/terminfo" \
                    "${BINDIR}/dialog" --erase-on-exit --defaultno --yes-label "Continue" --no-label "Abort" \
                          --title "WARNING" --yesno "\nYou seem to be using an iso image of an older version of\nSystemRescue. Versions before 9.05 have not been thoroughly\ntested for compatibility with this script" 9 70 || exitcode=$?
            if [[ "$exitcode" -ne 0 ]]; then
                echo "Aborted"
                exit 1
            fi
        fi
    fi
    
    # we also must be able to read the iso volume label
    declare -g PARTLABEL
    PARTLABEL=$("${BINDIR}/grep" -E "Volume Id *:" "${TMPDIR}/meta-pvd" | "${BINDIR}/sed" -e "s/^Volume Id *: \(.*\)/\1/")

    if ! echo "$PARTLABEL" | "${BINDIR}/grep" -q "^RESCUE" ; then
        echo "ERROR: can't read iso volume label"
        exit 3
    fi
}

check_targetdev()
{
    if ! [[ -e "$TARGETDEV" ]]; then
        echo "ERROR: target device $TARGETDEV doesn't exist"
        exit 1
    fi

    if ! [[ -b "$TARGETDEV" ]]; then
        echo "ERROR: target device not a block device: $TARGETDEV"
        exit 1
    fi

    TARGETDEVSIZE=$("${BINDIR}/lsblk" -o SIZE --bytes --noheadings --nodeps "$TARGETDEV")
    # require gracious 50 MB tolerance to account for filesystem metadata and partitioning
    if [[ "${TARGETDEVSIZE}" -lt $[$ISOSIZE+52428800] ]]; then
        echo "ERROR: $TARGETDEV is too small for the given iso image"
        exit 2
    fi

    if "${BINDIR}/lsblk" -o PKNAME --noheadings --nodeps "$TARGETDEV" | "${BINDIR}/grep" -q -E -v "^\$" ; then
        echo "ERROR: $TARGETDEV is not a raw device but a partition"
        exit 2
    fi

    if "${BINDIR}/lsblk" -o MOUNTPOINTS --noheadings "$TARGETDEV" | "${BINDIR}/grep" -q -E -v "^\$" ; then
        echo "ERROR: $TARGETDEV (or a partition of it) is currently mounted"
        exit 2
    fi

    KNAME=$("${BINDIR}/lsblk" -o KNAME --noheadings --nodeps "$TARGETDEV")
    if "${BINDIR}/find" "/sys/block/${KNAME}/" -path "*/holders/*" | "${BINDIR}/grep" -q -E -v "^\$" ; then
        echo "ERROR: $TARGETDEV (or a partition of it) is currently used in the kernel (e.g. device mapper)"
        exit 2
    fi

    if "${BINDIR}/lsblk" -o RO --noheadings --nodeps "$TARGETDEV" | "${BINDIR}/grep" -q "1" ||
        "${BINDIR}/lsblk" -o TYPE --noheadings --nodeps "$TARGETDEV" | "${BINDIR}/grep" -q -E "^rom" ; then
        echo "ERROR: $TARGETDEV is read-only"
        exit 2
    fi

    if ! "${BINDIR}/lsblk" -o HOTPLUG --noheadings --nodeps "$TARGETDEV" | "${BINDIR}/grep" -q "1" ; then
        if [[ "$CLI" -eq 1 ]] ; then
            echo "WARNING: $TARGETDEV is not a removable or hotplug device"
            read -p "Are you sure you want to overwrite it? (y/n)? " answer
            if [[ "$answer" != "y" ]] && [[ "$answer" != "Y" ]]; then
                echo "Aborted"
                exit 1
            fi
        else
            exitcode=0
            TERMINFO="${APPDIR}/usr/share/terminfo" \
                "${BINDIR}/dialog" --erase-on-exit --defaultno --title "Overwriting $TARGETDEV" --yesno \
                "\nWARNING: $TARGETDEV is not a removable or hotplug device\n\nAre you sure you want to overwrite it?" 9 70 || exitcode=$?
            if [[ "$exitcode" -ne 0 ]]; then
                echo "Aborted"
                exit 1
            fi
        fi
    fi

    if ! [[ -r "$TARGETDEV" && -w "$TARGETDEV" ]]; then
        gain_access
    fi
    
    if ! [[ -r "$TARGETDEV" && -w "$TARGETDEV" ]]; then
        echo ""
        echo "ERROR: still not enough permissions to access $TARGETDEV"
        echo "Please change rights manually."
        exit 1
    fi
    
    return
}

select_targetdev()
{
    if [[ "$CLI" -eq 1 ]] ; then
        echo "ERROR: please use the -t|--targetdev=<DEVICE-PATH> option when using --cli mode"
        exit 1
    fi

    # find all suitable hotplug block devices and show them in a dialog
    
    declare -a blockdevs
    readarray -t blockdevs < <("${BINDIR}/lsblk" -o KNAME --noheadings --nodeps)

    declare -a devmenu
    devmenu=( )
    for d in "${blockdevs[@]}" ; do
    
        if ! "${BINDIR}/lsblk" -o HOTPLUG --noheadings --nodeps "/dev/${d}" | "${BINDIR}/grep" -q "1" ; then
            # we only want to show hotplug / removable block devices
            continue
        fi

        if "${BINDIR}/lsblk" -o RO --noheadings --nodeps "/dev/${d}" | "${BINDIR}/grep" -q "1" ||
           "${BINDIR}/lsblk" -o TYPE --noheadings --nodeps "/dev/${d}" | "${BINDIR}/grep" -q -E "^rom" ; then
            # ignore read-only devices like cdroms
            continue
        fi
        
        TARGETDEVSIZE=$("${BINDIR}/lsblk" -o SIZE --bytes --noheadings --nodeps "/dev/${d}")
        # require gracious 50 MB tolerance to account for filesystem metadata and partitioning
        if [[ "${TARGETDEVSIZE}" -lt $[$ISOSIZE+52428800] ]]; then
            # we only want to show devices large enough
            continue
        fi

        TARGETDEVHUMANSIZE=$("${BINDIR}/lsblk" -o SIZE --noheadings --nodeps "/dev/${d}")
        # strip leading whitespace
        TARGETDEVHUMANSIZE="${TARGETDEVHUMANSIZE#"${TARGETDEVHUMANSIZE%%[![:space:]]*}"}"
        # strip trailing whitespace
        TARGETDEVHUMANSIZE="${TARGETDEVHUMANSIZE%"${TARGETDEVHUMANSIZE##*[![:space:]]}"}"

        # show this device -> read out it's model and manufacturer
        
        MODEL=$("${BINDIR}/lsblk" -o MODEL --bytes --noheadings --nodeps "/dev/${d}")
        VENDOR=$("${BINDIR}/lsblk" -o VENDOR --bytes --noheadings --nodeps "/dev/${d}")
        
        # replace all potentially dangerous characters with "_" - just to be sure, badusb is a thing...
        MODEL="${MODEL//[^[0-9A-Za-z_ .,+*/?<=>@:-]]/_}"
        VENDOR="${VENDOR//[^[0-9A-Za-z_ .,+*/?<=>@:-]]/_}"
        
        # strip trailing whitespace
        MODEL="${MODEL%"${MODEL##*[![:space:]]}"}"  
        VENDOR="${VENDOR%"${VENDOR##*[![:space:]]}"}"  
        
        # don't show vendor if just some hex code
        if [[ "$VENDOR" =~ ^0x[0-9a-fA-F]+ ]]; then
            VENDOR=""
        fi
        
        # don't show vendor if it is contained in the model too
        if echo "$MODEL" | grep -i -q "$VENDOR" ; then
            VENDOR=""
        fi

        if [[ -n "$VENDOR" ]]; then
            devmenu+=("/dev/${d}")
            devmenu+=("${VENDOR} ${MODEL} (${TARGETDEVHUMANSIZE}B)")
        else
            devmenu+=("/dev/${d}")
            devmenu+=("${MODEL} (${TARGETDEVHUMANSIZE}B)")
        fi
    done
    
    if [[ ${#devmenu[@]} -eq 0 ]]; then
        echo "ERROR: no suitable removable/hotplug target devices found"
        echo "You can manually specify the target device with the --targetdev=<DEVICE-PATH> option"
        exit 1
    fi
    
    # let user select between all devices in a ncurses dialog
    exec 3>&1;
    exitcode=0
    SELECTED=$(TERMINFO="${APPDIR}/usr/share/terminfo" \
        "${BINDIR}/dialog" --erase-on-exit --title "Select target device" \
        --menu "Select device to write SystemRescue to" 0 0 0 "${devmenu[@]}" 2>&1 1>&3) || exitcode=$?
    exec 3>&-

    if [[ "$exitcode" -ne 0 ]] || [[ -z "$SELECTED" ]]; then
        echo "Aborted"
        exit 1
    fi
    
    TARGETDEV="${SELECTED}"

    return
}

gain_access_sudo()
{
    # do we have sudo installed at all?
    if ! command -v sudo &>/dev/null ; then
        return 1
    fi

    echo ""
    echo "trying: sudo --user=root chown $EUID \"$TARGETDEV\""
    echo ""
    
    # this is using the sudo of the system, we can't bring our own
    exitcode=0
    sudo -u root chown $EUID "$TARGETDEV" || exitcode=$?

    if [[ "$exitcode" -ne 0 ]]; then
        echo ""
        echo "sudo failed to get access."
        return 1
    fi
   
    return 0
}

gain_access_pkexec()
{
    # do we have pkexec installed at all?
    if ! command -v pkexec &>/dev/null ; then
        return 1
    fi

    # is polkitd running? pkexec can't work without polkit
    if ! "${BINDIR}/pgrep" -f polkitd >/dev/null ; then
        return 1
    fi

    echo ""
    echo "trying: pkexec --user=root chown $EUID \"$TARGETDEV\""
    echo ""
    
    # this is using the pkexec of the system, we can't bring our own
    exitcode=0
    pkexec --user root chown $EUID "$TARGETDEV" || exitcode=$?

    if [[ "$exitcode" -ne 0 ]]; then
        echo ""
        echo "pkexec failed to get access."
        return 1
    fi
   
    return 0
}

gain_access_su()
{
    # do we have su installed at all?
    if ! command -v su &>/dev/null ; then
        return 1
    fi

    echo ""
    echo "trying: su -s /bin/sh root -c \"chown $EUID $TARGETDEV\""
    echo ""
    
    # this is using su of the system, we can't bring our own
    exitcode=0
    su -s /bin/sh root -c "chown $EUID \"$TARGETDEV\"" || exitcode=$?

    if [[ "$exitcode" -ne 0 ]]; then
        echo ""
        echo "su failed to get access."
        return 1
    fi
   
    return 0
}

gain_access()
{
    # we don't have write access to $TARGETDEV yet
    # try to use sudo to gain access
    
    echo "Not enough rights to access $TARGETDEV"

    if [[ -z "$GRANT_TOOL" ]] || [[ "$GRANT_TOOL" == "sudo" ]]; then
        exitcode=0
        gain_access_sudo || exitcode=$?
        if [[ "$exitcode" -eq 0 ]]; then
            return
        fi
    fi

    if [[ -z "$GRANT_TOOL" ]] || [[ "$GRANT_TOOL" == "pkexec" ]]; then
        exitcode=0
        gain_access_pkexec || exitcode=$?
        if [[ "$exitcode" -eq 0 ]]; then
            return
        fi
    fi
        
    if [[ -z "$GRANT_TOOL" ]] || [[ "$GRANT_TOOL" == "su" ]]; then
        exitcode=0
        gain_access_su || exitcode=$?
        if [[ "$exitcode" -eq 0 ]]; then
            return
        fi
    fi
    
    echo ""
    echo "ERROR: can't get permissions to access $TARGETDEV"
    echo "Please change rights manually."
    exit 1
}

clean_tmpdir()
{
    # clean up our temp dir, called via EXIT trap
    "${BINDIR}/rm" -rf "${TMPDIR}"
}

create_tmpdir()
{
    # create tmpdir to unpack to
    
    # if not configured we use /tmp
    if ! [[ -v TMPDIR ]] || [[ -z "$TMPDIR" ]]; then
        TMPDIR=/tmp
    fi

    if ! [[ -r "$TMPDIR" && -w "$TMPDIR" ]]; then
        echo "ERROR: not enough permissions on $TMPDIR"
        exit 2
    fi
    
    # check free space on temp dir
    TMPSPACE=$("${BINDIR}/df" --block-size=1 --output=avail "$TMPDIR" | "${BINDIR}/grep" -v "Avail")
    # require gracious 50 MB tolerance to account for filesystem metadata and inefficiency
    if [[ "${TMPSPACE}" -lt $[$ISOSIZE+52428800] ]]; then
        echo "ERROR: not enough space on $TMPDIR"
        exit 2
    fi

    # always create a subdir below a given TMPDIR for security/reliability reasons
    TMPDIR=$("${BINDIR}/mktemp" --tmpdir="${TMPDIR}" --directory sysrescueusbwriter.XXXXXXXXXX)

    # always clean up our tmpdir when the script exits
    trap clean_tmpdir EXIT
}

write_image()
{
    if [[ "$CLI" -eq 1 ]] ; then
        read -p "Are you sure you want to overwrite all content of $TARGETDEV? (y/n)? " answer
        if [[ "$answer" != "y" ]] && [[ "$answer" != "Y" ]]; then
            echo "Aborted"
            exit 1
        fi
    else
        exitcode=0
        TERMINFO="${APPDIR}/usr/share/terminfo" \
            "${BINDIR}/dialog" --erase-on-exit --defaultno --title "Overwriting $TARGETDEV" --yesno \
            "\nAre you sure you want to overwrite all content of $TARGETDEV?" 8 70 || exitcode=$?
        if [[ "$exitcode" -ne 0 ]]; then
            echo "Aborted"
            exit 1
        fi
    fi
        
    echo "Partitioning and formatting target device..."

    # size not given means until the end of the device
    "${BINDIR}/sfdisk" --wipe always --wipe-partitions always --no-tell-kernel --quiet "${TARGETDEV}" 2>/dev/null <<EOF
label: dos
unit: sectors
sector-size: 512

img1 : start=        2048, type=c, bootable
EOF

    # FAT tools need to convert to/from codepage 850, the dos default
    # we bring our own gconv libs for our glibc, use them
    export GCONV_PATH="${APPDIR}/usr/lib/gconv"

    # don't let mtools load any of the systemwide config files
    export MTOOLSRC="${APPDIR}/mtools.conf"
    export MCWD="${APPDIR}/mcwd"
    export MCOPY_SYNC=""

    # the filesystem begins at sector 2048, fix backup boot sector at 6 (see below)
    "${BINDIR}/mkfs.fat" -F 32 -b 6 -n "${PARTLABEL}" --offset=2048 -I "${TARGETDEV}" >/dev/null

    # copy all files from the iso onto the fat partition
    declare -a firstlevel
    readarray -t firstlevel < <("${BINDIR}/find" "${TMPDIR}/filesystem" -maxdepth 1 -mindepth 1)

    if [[ "$CLI" -eq 1 ]] ; then
        echo "Copying files..."
        # our patched mcopy outputs the progress to fd 3, one "." per megabyte
        # regularly flush the buffers for a smooth progress bar (this is part of the mtools patch too)
        MCOPY_SYNC="\"${BINDIR}/sync\" \"${TARGETDEV}\"" "${BINDIR}/mcopy" -spQm "${firstlevel[@]}" -i "${TARGETDEV}@@1048576" ::/ \
            3>&1
        echo
    else
        # our patched mcopy outputs the progress to fd 3, one "." per megabyte
        # regularly flush the buffers for a smooth progress bar (this is part of the mtools patch too)
        MCOPY_SYNC="\"${BINDIR}/sync\" \"${TARGETDEV}\"" "${BINDIR}/mcopy" -spQm "${firstlevel[@]}" -i "${TARGETDEV}@@1048576" ::/ \
            3> >("${BINDIR}/gaugeconv" $[$ISOSIZE/1048576] | TERMINFO="${APPDIR}/usr/share/terminfo" \
                 "${BINDIR}/dialog" --erase-on-exit --gauge "Copying files..." 0 80)
    fi
            
    echo
    echo "Installing syslinux bootloader..."

    # install syslinux on target dev
    # forks several mtools programs, so we need to set the PATH to our dir only
    PATH="${BINDIR}" "${BINDIR}/syslinux" --directory /sysresccd/boot/syslinux/ --install "${TARGETDEV}" --offset 1048576 3>/dev/null

    # install the syslinux MBR, boot from partition 1
    printf '\1' | "${BINDIR}/cat" "${APPDIR}/usr/lib/syslinux/bios/altmbr.bin" - | "${BINDIR}/dd" bs=440 count=1 iflag=fullblock conv=notrunc "of=${TARGETDEV}" 2>/dev/null

    # syslinux only installs itself to the primary fat boot sector, not the backup boot sector
    # the backup boot sector is at logical sector 6 of the fat32 filesystem, the primary at sector 1
    # copy it over so we get a properly clean filesystem
    "${BINDIR}/dd" bs=512 count=1 iseek=2048 "if=${TARGETDEV}" "of=${TMPDIR}/fatboosect.bin" 2>/dev/null
    "${BINDIR}/dd" bs=512 count=1 oseek=2054 conv=notrunc,nocreat "if=${TMPDIR}/fatboosect.bin" "of=${TARGETDEV}" 2>/dev/null

    # write all caches to drive before we do verification
    "${BINDIR}/sync" "${TARGETDEV}"
}

verify_image()
{
    if [[ "$CLI" -eq 1 ]] ; then
        # pipe "." from mcopy to stdout in cli mode
        exec 3>&1
        DIALOGPID=0
        echo "Verifying data..."
    else
        # our patched mcopy outputs the progress to fd 3, one "." per megabyte
        # run gaugeconv & dialog in the background to display the verification progress
        exec 3> >("${BINDIR}/gaugeconv" $[$ISOSIZE/1048576] | TERMINFO="${APPDIR}/usr/share/terminfo" \
                "${BINDIR}/dialog" --gauge "Verifying data..." 0 80)
        DIALOGPID=$!
    fi

    # FAT tools need to convert to/from codepage 850, the dos default
    # we bring our own gconv libs for our glibc, use them
    export GCONV_PATH="${APPDIR}/usr/lib/gconv"

    # don't let mtools load any of the systemwide config files
    export MTOOLSRC="${APPDIR}/mtools.conf"
    export MCWD="${APPDIR}/mcwd"
    export MCOPY_SYNC=""
    
    # verify output media content
    "${BINDIR}/find" "${TMPDIR}/filesystem/" -type f -printf "%P\n" | while read -r line; do
        exitcode=0
        "${BINDIR}/mcopy" -i "${TARGETDEV}@@1048576" "::/${line}" - | \
            "${BINDIR}/cmp" - "${TMPDIR}/filesystem/${line}" >/dev/null || exitcode=$?
        if [[ $exitcode -ne 0 ]]; then
            # end gaugeconv & dialog running in the background by closing it's stdin
            exec 3>&- || exitcode=$?
            
            if [[ "$CLI" -ne 1 ]] ; then
                wait $DIALOGPID || exitcode=$?
                
                # dialog was aborted and messed up the terminal, we need to clean up first
                "${BINDIR}/stty" sane || exitcode=$?
                "${BINDIR}/clear"
            fi
            
            echo
            echo "ERROR: verification mismatch for file ${line}"
            echo
            exit 3
        fi
    done

    # end gaugeconv & dialog running in the background by closing it's stdin
    exec 3>&- || exitcode=$?

    if [[ "$CLI" -ne 1 ]] ; then
        wait $DIALOGPID || exitcode=$?
        # dialog has ended, but we need to clear the screen
        "${BINDIR}/clear"
    fi
}

############# SCRIPT STARTS HERE ####################

parse_args "$@"

check_iso
create_tmpdir

if [[ "$CLI" -ne 1 ]] ; then
    check_dialog
fi

if [[ -n "$TARGETDEV" ]]; then
    # we got $TARGETDEV as a cmdline option, check if valid
    check_targetdev
else
    # no $TARGETDEV option, let user select one in a dialog
    select_targetdev
    check_targetdev
fi

echo "Unpacking iso image..."

# unpack iso image
"${BINDIR}/mkdir" -p "${TMPDIR}/filesystem"
"${BINDIR}/xorriso" -drive_access "shared:readonly" -indev "${ISOIMAGE}" -pvd_info $VERBOSE >"${TMPDIR}/meta-pvd" 2>/dev/null
"${BINDIR}/xorriso" -osirrox on -drive_access "shared:readonly" -indev "${ISOIMAGE}" -extract / "${TMPDIR}/filesystem" $VERBOSE 2>/dev/null

check_compatibility

if [[ $VERIFY_ONLY -eq 0 ]]; then
    write_image
    verify_image
else
    verify_image
fi

echo
echo "Success"
